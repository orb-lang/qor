* Core base


This contains parts of the core module system which are used within the core
module system.

Nothing in this module should be invoked directly, except by core; everything
in it is attached to one of the other submodules.

#!lua
local _base = {}
#/lua


*** thunk(fn, ...)

Returns a function which, called, will call the function with the given
arguments.

#!lua
function _base.thunk(fn, ...)
   local args = pack(...)
   return function()
      return fn(unpack(args, 1, args.n))
   end
end
#/lua


*** assertfmt(pred, msg, ...)

#!lua
local format = assert(string.format)

function _base.assertfmt(pred, msg, ...)
   if pred then
      return pred
   else
      error(format(msg, ...), 2)
   end
end
#/lua


*** iscallable

Defined in both =table= and =fn=, since the arguments returning true are one
or the other of these.

#!lua
function _base.iscallable(val)
   if type(val) == 'function' then return true end
   if type(val) == 'table' then
      local M = getmetatable(val)
      if M and rawget(M, "__call") then
         return true
      end
   end
   return false
end
#/lua

*** deepclone(tab)

Makes a cycle-checked deep copy of a table, including metatables.

#!lua
function _base.deepclone(tab)
   assert(type(tab) == "table",
          "cannot deepclone value of type " .. type(tab))
   local dupes = {}
   local function _deep(val)
      local copy = val
      if type(val) == "table" then
         if dupes[val] then
            copy = dupes[val]
         else
            copy = {}
            dupes[val] = copy
            for k,v in next, val do
               copy[_deep(k)] = _deep(v)
            end
            -- copy the metatable after, in case it contains
            -- __index or __newindex behaviors
            copy = setmetatable(copy, _deep(getmetatable(val)))
         end
      end
      return copy
   end
   return _deep(tab)
end
#/lua

#!lua
return _base
#/lua
