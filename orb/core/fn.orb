* Function Extensions

#!lua
local fn = {}
#/lua


** 5.2 compatibility


*** pack(...)

A 5.2 shim.

#!lua
local function pack(...)
   return { n = select('#', ...), ... }
end
fn.pack = pack
#/lua


** Function extensions

Various methods to extend the functionality of functions.


*** thunk(fn, ...)

Returns a function which, called, will call the function with the given
arguments.

#!lua
function fn.thunk(fn, ...)
   local args = pack(...)
   return function()
      return fn(unpack(args, 1, args.n))
   end
end
local thunk = fn.thunk
#/lua


*** partial(fn, ...)

Partial applicator: takes a function, and fills in the given arguments,
returning another function which accepts additional arguments:

#!lua-example
add5 = fn.partial(function(a,b)
                  return a + b
               end, 5)
return add5(10) -- returns 15
#/lua

#!lua
function fn.partial(fn, ...)
   local args = pack(...)
   return function(...)
      return fn(unpack(args, 1, args.n), ...)
   end
end
#/lua


** Errors and asserts


*** Assertfmt

I'll probably just globally replace assert with this over time.

This avoids doing concatenations and conversions on messages that we never
see in normal use.

#!lua
local format = assert(string.format)

function fn.assertfmt(pred, msg, ...)
   if pred then
      return pred
   else
      error(format(msg, ...), 2)
   end
end
#/lua

#!lua
return fn
#/lua
