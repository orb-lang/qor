* Function Extensions


  Various methods to extend the functionality of functions and methods,
methodically.

#!lua
local _base = require "core:core/_base"
local fn = {}
#/lua



*** thunk(fn, ...)

Returns a function which, called, will call the function with the given
arguments.

#!lua
fn.thunk = assert(_base.thunk)
#/lua


*** partial(fn, ...)

Partial applicator: takes a function, and fills in the given arguments,
returning another function which accepts additional arguments:

#!lua-example
add5 = fn.partial(function(a,b)
                  return a + b
               end, 5)
return add5(10) -- returns 15
#/lua

#!lua
function fn.partial(fn, ...)
   local args = pack(...)
   return function(...)
      return fn(unpack(args, 1, args.n), ...)
   end
end
#/lua


*** itermap(fn, iter)

Applies =fn= to each element returned from =iter=, in turn.

For a consistent interface, all return values are =pack=ed into one array
slot of a table, which is returned.

#!lua
function fn.itermap(fn, iter)
   local ret, res = {}
   while true do
      res = pack(fn(iter()))
      if #res == 0 then
         return ret
      else
         ret[#ret + 1] = res
      end
   end
end
#/lua


** Errors and asserts


*** Assertfmt

I'll probably just globally replace assert with this over time.

This avoids doing concatenations and conversions on messages that we never
see in normal use.

#!lua
fn.assertfmt = _base.assertfmt
#/lua

#!lua
return fn
#/lua
