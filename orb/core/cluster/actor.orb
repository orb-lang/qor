* Actor

  A collection of useful functions for Actors.

What constitutes an Actor in cluster, and therefore in bridge, is a work in
progress.  It is a role, more than an interface or a specific type of object.


** Premise

  One of the distinguishing characteristics of an Actor is that they are
singular.

This means that only one reference to an Actor should exist, and only the
holder of that reference should call the Actor directly.

Lua offers no way to enforce this, so we'll just have to be careful.

Other communication must take place through various proxies.  We have the
[[Window][@:window/window]], which offers a proxy table with fine-grained
access to the underlying Actor's table, and the [[mailbox][@:mailbox/mailbox]],
a two-way queue for message passing.

There will inevitably be methods and functions useful in constructing and
implementing Actors.  I have one so far, hence this module.


**** _base

#!lua
local _base = require "core:_base"
local iscallable = assert(_base.iscallable)
#/lua


** actor library

#!lua
local act = {}
#/lua


*** act.borrowmethod(actor, method)

  This function takes an Actor and a method, and returns a closure which a)
will call the method with the Actor as the first parameter and b) will not
retain a strong reference to the Actor.

The method may be either a callable or a string.  A callable is used directly,
and a string is used at call-time to retrieve a method from the Actor and call
it.

Both options are provided, because with the callable, it doesn't have to be an
actual method on a field of the Actor, and with the string, the method itself
can change and will still be called.

We do this with an anonymous index table and a weak attribute table, which we
use to retrieve the Actor and method if they haven't gone out of scope.

#!lua
local _weak = { __mode = 'kv' }
local __act_mth_attr = setmetatable({}, _weak)
local __mth_attr = setmetatable({}, _weak)

function act.borrowmethod(actor, method)
   assert(iscallable(method) or type(method) == 'string',
          "#2 for borrowmethod must be string or callable")
   local uid = {}
   __act_mth_attr[uid] = actor
   actor = nil
   if type(method) == 'string' then
      -- return a lookup function
      __mth_attr[uid] = method
      method = nil
      return function(...)
         local _actor = __act_mth_attr[uid]
         local _method = __mth_attr[uid]
         if not _actor then
            error "actor has gone out of scope"
         end
         return _actor[_method](_actor, ...)
      end
   else
      -- return a direct-call function
      __mth_attr[uid] = method
      method = nil
      return function(...)
         local _actor = __act_mth_attr[uid]
         local _method = __mth_attr[uid]
         if not _actor then
            error "actor has gone out of scope"
         end
         return _method(_actor, ...)
      end
   end
end
#/lua

#!lua
return act
#/lua
